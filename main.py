from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    start_buttons = ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å URL üëÄ', '–ó–∞–≥—Ä—É–∑–∏—Ç—å QR_code üñ•']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(start_buttons)

    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –∏ QR_Cods!\n(–î–∞, –¥–∞, —ç—Ç —è)")


@dp.message_handler(Text(equals='–û—Ç–ø—Ä–∞–≤–∏—Ç—å URL üëÄ'))
async def process_start_command(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ url, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
    current_state = await state.get_state()


@dp.message_handler(Text(equals='–ó–∞–≥—Ä—É–∑–∏—Ç—å QR_code üñ•'))
async def process_start_command(message: types.Message, state: FSMContext):
    pass