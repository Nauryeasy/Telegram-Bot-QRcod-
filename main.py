import time
from urllib.parse import urlparse

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from config import TOKEN
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

from src.translate_qr_code import get_link_qr_code
from src.check_url import check_link
from utils import TestStates
from aiogram.utils.markdown import hide_link

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=['start'])
@dp.message_handler(content_types=['photo'])
async def process_start_command(message: types.Message):
    start_button_1, start_button_2, start_button_3 = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å URL üëÄ', '–ó–∞–≥—Ä—É–∑–∏—Ç—å QR_code üñ•', '–û—Ç–º–µ–Ω–∞ ‚ùå'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(start_button_1)
    keyboard.add(start_button_2)
    keyboard.add(start_button_3)
    with open('img.png', 'rb') as file:
        await message.answer_photo(photo=file)
        await message.answer("""|----------------------------------
|<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>
|----------------------------------
|<b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>
|----------------------------------
|
|<b>---></b> /qr_code
|
|<b>---></b> /url
|
|<b>---></b> /help
|
|----------------------------------""", parse_mode="HTML", reply_markup=keyboard)


@dp.message_handler(commands=["qr_code"])
async def cmd_qrcode(message: types.Message, state: FSMContext):
    await state.set_state(TestStates.all()[0])
    await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å qr_code, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")


@dp.message_handler(commands=["url"])
async def cmd_url(message: types.Message, state: FSMContext):
    await state.set_state(TestStates.all()[1])
    await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ url, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")


@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    start_button_1, start_button_2, start_button_3 = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å URL üëÄ', '–ó–∞–≥—Ä—É–∑–∏—Ç—å QRcode üñ•', '–û—Ç–º–µ–Ω–∞ ‚ùå'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(start_button_1)
    keyboard.add(start_button_2)
    keyboard.add(start_button_3)
    with open('img_1.png', 'rb') as file:
        await message.answer_photo(photo=file)
        await message.answer(
            """
            <b>–í–´ –û–ë–†–ê–¢–ò–õ–ò–°–¨ –ü–û –ö–û–ú–ê–ù–î–ï /help</b>
            
1Ô∏è‚É£ /qrcode - –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ QRcode'–∞ –≤ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É, –∞ –∑–∞—Ç–µ–º —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –∏ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫.
            
2Ô∏è‚É£ /url - –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ç—É—Ç –∂–µ –≤–∞–º –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫
            """, parse_mode='HTML', reply_markup=keyboard)


@dp.message_handler(Text(equals='–û—Ç–ø—Ä–∞–≤–∏—Ç—å URL üëÄ'))
async def processing_url(message: types.Message, state: FSMContext):
    await state.set_state(TestStates.all()[1])
    await bot.send_message(message.from_user.id, """
–ù–∞–ø–∏—à–∏ url, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
-------------------------------------------->
""")


@dp.message_handler(Text(equals='–ó–∞–≥—Ä—É–∑–∏—Ç—å QR_code üñ•'))
async def processing_qr_code(message: types.Message, state: FSMContext):
    await state.set_state(TestStates.all()[0])
    await bot.send_message(message.from_user.id, """
–û—Ç–ø—Ä–∞–≤—å qr_code, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
-------------------------------------------->
""")


@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞ ‚ùå'), state=TestStates.QR_STATE[0])
async def processing_url(message: types.Message, state: FSMContext):
    await state.reset_state()
    start_button_1, start_button_2, start_button_3 = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å URL üëÄ', '–ó–∞–≥—Ä—É–∑–∏—Ç—å QR_code üñ•', '–û—Ç–º–µ–Ω–∞ ‚ùå'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(start_button_1)
    keyboard.add(start_button_2)
    keyboard.add(start_button_3)
    with open('img.png', 'rb') as file:
        await message.answer_photo(photo=file)
        await message.answer("""|----------------------------------
    |<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>
    |----------------------------------
    |<b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>
    |----------------------------------
    |
    |<b>---></b> /qr_code
    |
    |<b>---></b> /url
    |
    |<b>---></b> /help
    |
    |----------------------------------""", parse_mode="HTML", reply_markup=keyboard)


@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞ ‚ùå'), state=TestStates.URL_STATE[0])
async def processing_url(message: types.Message, state: FSMContext):
    await state.reset_state()
    start_button_1, start_button_2, start_button_3 = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å URL üëÄ', '–ó–∞–≥—Ä—É–∑–∏—Ç—å QR_code üñ•', '–û—Ç–º–µ–Ω–∞ ‚ùå'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(start_button_1)
    keyboard.add(start_button_2)
    keyboard.add(start_button_3)
    with open('img.png', 'rb') as file:
        await message.answer_photo(photo=file)
        await message.answer("""|----------------------------------
    |<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>
    |----------------------------------
    |<b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>
    |----------------------------------
    |
    |<b>---></b> /qr_code
    |
    |<b>---></b> /url
    |
    |<b>---></b> /help
    |
    |----------------------------------""", parse_mode="HTML", reply_markup=keyboard)


@dp.message_handler(state=TestStates.URL_STATE[0])
async def solution_url(message: types.Message, state: FSMContext):
    url = message.text
    await message.reply("""
_____________________üí§üí§üí§_________________________
–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏...
_____________________üí§üí§üí§_________________________
    """, reply=False)
    try:
        parsed_url = urlparse(url)
        domain = parsed_url.scheme + '://' + parsed_url.netloc + '/'
        result = check_link(domain)
        galochka, krestik = '‚úÖ', '‚ùå'
        with open('img_2.png', 'rb') as file:
            await message.answer_photo(photo=file)
        card = \
            f'| –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {krestik if result["redirect"] == True else galochka}\n' \
            f'| –ü–æ–¥–¥–µ—Ä–∂–∫–∞ https: {galochka if result["https"] == True else krestik}\n' \
            f'| –ù–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {galochka if result["ssl"] == True else krestik}\n' \
            f'| –ù–µ –ø–∞—Ä–æ–¥–∏—Ä—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã: {krestik if result["suspicious"] == True else galochka}\n' \
            f'| –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ JS –∫–æ–¥: {krestik if result["suspicious_js"] == True else galochka}\n' \
            f'| –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {krestik if result["Long level"] == True else galochka}\n' \
            f'| –ß–∏—Ç–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {krestik if result["Unreadability"] == True else galochka}\n'
        await message.reply(card, reply=False)
        await state.reset_state()
    except:
        try:
            parsed_url = urlparse(url)
            domain = 'http://' + parsed_url.netloc + '/'
            result = check_link(domain)
            galochka, krestik = '‚úÖ', '‚ùå'
            with open('img_2.png', 'rb') as file:
                await message.answer_photo(photo=file)
            card = \
                f'| –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {krestik if result["redirect"] == True else galochka}\n' \
                f'| –ü–æ–¥–¥–µ—Ä–∂–∫–∞ https: {galochka if result["https"] == True else krestik}\n' \
                f'| –ù–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {galochka if result["ssl"] == True else krestik}\n' \
                f'| –ù–µ –ø–∞—Ä–æ–¥–∏—Ä—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã: {krestik if result["suspicious"] == True else galochka}\n' \
                f'| –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ JS –∫–æ–¥: {krestik if result["suspicious_js"] == True else galochka}\n' \
                f'| –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {krestik if result["Long level"] == True else galochka}\n' \
                f'| –ß–∏—Ç–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {krestik if result["Unreadability"] == True else galochka}\n'
            await message.reply(card, reply=False)
            await state.reset_state()
        except:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞üòµ", reply=False)
            await state.reset_state()


@dp.message_handler(state=TestStates.QR_STATE[0], content_types=['photo'])
async def solution_QRcode(message: types.Message, state: FSMContext):
    await message.reply("üìé –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è... üìé ", reply=False)
    time.sleep(1)
    await message.photo[-1].download('src/img.png')
    time.sleep(1)
    try:
        url = get_link_qr_code()
        await message.reply("""
_____________________üí§üí§üí§_________________________
–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏...
_____________________üí§üí§üí§_________________________
            """, reply=False)
        time.sleep(1)
        try:
            with open('img_3.png', 'rb') as file:
                await message.answer_photo(photo=file)
                time.sleep(2)
            parsed_url = urlparse(url)
            domain = parsed_url.scheme + '://' + parsed_url.netloc + '/'
            result = check_link(domain)
            galochka, krestik = '‚úÖ', '‚ùå'
            card = f'URL: {url}\n' \
                   f'–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {krestik if result["redirect"] == True else galochka}\n' \
                   f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞ https: {galochka if result["https"] == True else krestik}\n' \
                   f'–ù–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {galochka if result["ssl"] == True else krestik}\n' \
                   f'–ù–µ –ø–∞—Ä–æ–¥–∏—Ä—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã: {krestik if result["suspicious"] == True else galochka}\n' \
                   f'–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ JS –∫–æ–¥: {krestik if result["suspicious_js"] == True else galochka}\n' \
                   f'–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {krestik if result["Long level"] == True else galochka}\n' \
                   f'–ß–∏—Ç–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {krestik if result["Unreadability"] == True else galochka}\n'
            await message.reply(card, reply=False)
            await state.reset_state()
        except:
            try:
                await message.reply("""üîí –°–°–´–õ–ö–ê –ò–ú–ï–ï–¢ –ü–†–û–¢–û–ö–û–õ https! üîí
‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Ç–æ–∫–æ–ª—É https ‚ö†Ô∏è
üñ• –ò–¥—ë—Ç –∑–∞–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ http, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ... üñ•""", reply=False)
                time.sleep(2)
                parsed_url = urlparse(url)
                domain = 'http://' + parsed_url.netloc + parsed_url.path
                result = check_link(domain)
                galochka, krestik = '‚úÖ', '‚ùå'
                card = f'URL: {domain}\n' \
                       f'–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {krestik if result["redirect"] == True else galochka}\n' \
                       f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞ https: {galochka if result["https"] == True else krestik}\n' \
                       f'–ù–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {galochka if result["ssl"] == True else krestik}\n' \
                       f'–ù–µ –ø–∞—Ä–æ–¥–∏—Ä—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã: {krestik if result["suspicious"] == True else galochka}\n' \
                       f'–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ JS –∫–æ–¥: {krestik if result["suspicious_js"] == True else galochka}\n' \
                       f'–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {krestik if result["Long level"] == True else galochka}\n' \
                       f'–ß–∏—Ç–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {krestik if result["Unreadability"] == True else galochka}\n'
                await message.reply(card, reply=False)
                await state.reset_state()
            except:
                await message.reply("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –≤ QR-–∫–æ–¥–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è... ‚ö†Ô∏è", reply=False)
                await state.reset_state()
    except:
        await message.reply(
            """
------------------------------------

                     ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
                     
<b>–ù–ï –£–î–ê–õ–û–°–¨ –†–ê–°–ü–û–ó–ù–ê–¢–¨ QR-–ö–û–î</b>

<b>–ü—Ä–∏—á–∏–Ω–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å:</b>

1Ô∏è‚É£ - –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏

2Ô∏è‚É£ - QR-–∫–æ–¥–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω

3Ô∏è‚É£ - –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞

------------------------------------
            """, parse_mode='HTML', reply=False)
        await state.reset_state()


if __name__ == '__main__':
    executor.start_polling(dp)
